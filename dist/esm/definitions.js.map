{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAwFA,MAAM,CAAN,IAAY,WAaX;AAbD,WAAY,WAAW;IACrB,2BAAY,CAAA;IACZ,kCAAmB,CAAA;IACnB,qCAAsB,CAAA;IACtB,6CAA8B,CAAA;IAC9B,sCAAuB,CAAA;IACvB,6CAA8B,CAAA;IAC9B,qCAAsB,CAAA;IACtB,2CAA4B,CAAA;IAC5B,uCAAwB,CAAA;IACxB,2CAA4B,CAAA;IAC5B,qCAAsB,CAAA;IACtB,mDAAoC,CAAA;AACtC,CAAC,EAbW,WAAW,KAAX,WAAW,QAatB","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface MatterPlugin {\n  configure(options: {\n    deviceControllerKey?: string;\n    caRootCert?: string;\n    fabricId: string;\n    vendorId: number;\n  }): Promise<void>;\n  \n  clear(): Promise<void>;\n\n  qrCodeCommissioning(options: {\n    deviceId: string;\n    qrCodeId: string;\n    ssid: string;\n    ssidPassword: string;\n  }): Promise<{ deviceType: string }>;\n\n  manualCodeCommissioning(options: {\n    deviceId: string;\n    manualCode: string;\n    ssid: string;\n    ssidPassword: string;\n  }): Promise<{ deviceType: string }>;\n\n  getCerts(): Promise<{ deviceControllerKey: string; caRootCert: string }>;\n\n  commandOnOff(options: {\n    deviceId: string;\n    value: boolean;\n    endpointId: number;\n  }): Promise<void>;\n\n  getEndpoint<T>(options: {\n    deviceId: string;\n    endpointId: number;\n  }): Promise<{ data: T }>;\n\n  getCluster<T>(options: {\n    deviceId: string;\n    endpointId: number;\n    clusterId: number;\n  }): Promise<{ data: T }>;\n\n  readAttribute(options: AttributePath): Promise<{ value: string }>;\n\n  subscribeAttribute(options: SubscriberOptions): Promise<void>;\n\n  /**\n   * \n   * @param options \n   * @param setupPIN 8 digit random pin  \n   */\n  openCommissioningWindow(options: {\n    deviceId: string;\n    discriminator: number;\n    duration: number;\n    setupPIN: number;\n  }): Promise<{ manualCode: string }>;\n\n  removeFabric(options: { deviceId: string; fabricId: string }): Promise<void>;\n\n  removeAllFabric(options: { deviceId: string }): Promise<void>;\n\n  addListener<T>(\n    eventName: string,\n    listenerFunc: AttributeChangeListener<T>,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n}\n\nexport interface AttributePath {\n  deviceId: string;\n  endpointId: number;\n  clusterId: number;\n  attributeId: number;\n}\n\nexport interface EventOptions {\n  eventName: string;\n  min: number;\n  max: number;\n}\n\nexport type SubscriberOptions = EventOptions & AttributePath;\n\nexport declare type AttributeChangeListener<T> = (data: T) => void;\n\nexport enum ErrorStatus {\n  Close = '-1',\n  GenericError = '-2',\n  RendezVousError = '-3',\n  StartCommissioningError = '-4',\n  ParseQrCodeError = '-5',\n  GetDeviceConnectedError = '-6',\n  PairDeviceError = '-7',\n  CommissioningEndError = '-8',\n  BluetoothDisabled = '-9',\n  ParseManualCodeError = '-10',\n  getDeviceError = '-11',\n  openCommissioningWindowError = '-12',\n}\n"]}