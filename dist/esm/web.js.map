{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAQ5C,MAAM,OAAO,SAAU,SAAQ,SAAS;IACtC,YAAY,CAAC,OAA+C;QAC1D,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,eAAe,CAAC,OAA6B;QAC3C,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,uBAAuB,CAAC,OAIvB;QACC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,mBAAmB,CAAC,OAKnB;QACC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,uBAAuB,CAAC,OAKvB;QACC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,QAAQ;QACN,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,aAAa,CAAC,OAAsB;QAClC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,kBAAkB,CAAC,OAA0B;QAC3C,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,SAAS,CAAC,OAKT;QACC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,KAAK;QACH,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,YAAY,CAAC,OAIZ;QACC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,WAAW,CAAI,OAGd;QACC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,UAAU,CAAI,OAIb;QACC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,YAAY,CAAI,OAKf;QACC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  AttributePath,\n  MatterPlugin,\n  SubscriberOptions,\n} from './definitions';\n\nexport class MatterWeb extends WebPlugin implements MatterPlugin {\n  removeFabric(options: { deviceId: string; fabricId: string }): Promise<void> {\n    console.log(options);\n    throw new Error('Method not implemented.');\n  }\n\n  removeAllFabric(options: { deviceId: string }): Promise<void> {\n    console.log(options);\n    throw new Error('Method not implemented.');\n  }\n\n  openCommissioningWindow(options: {\n    deviceId: string;\n    discriminator: number;\n    duration: number;\n  }): Promise<{ manualCode: string }> {\n    console.log(options);\n    throw new Error('Method not implemented.');\n  }\n\n  qrCodeCommissioning(options: {\n    deviceId: string;\n    qrCodeId: string;\n    ssid: string;\n    ssidPassword: string;\n  }): Promise<{ deviceType: string }> {\n    console.log(options);\n    throw new Error('Method not implemented.');\n  }\n\n  manualCodeCommissioning(options: {\n    deviceId: string;\n    manualCode: string;\n    ssid: string;\n    ssidPassword: string;\n  }): Promise<{ deviceType: string }> {\n    console.log(options);\n    throw new Error('Method not implemented.');\n  }\n\n  getCerts(): Promise<{ deviceControllerKey: string; caRootCert: string }> {\n    throw new Error('Method not implemented.');\n  }\n  readAttribute(options: AttributePath): Promise<{ value: string }> {\n    console.log(options);\n    throw new Error('Method not implemented.');\n  }\n\n  subscribeAttribute(options: SubscriberOptions): Promise<void> {\n    console.log(options);\n    throw new Error('Method not implemented.');\n  }\n\n  configure(options: {\n    deviceControllerKey?: string;\n    caRootCer?: string;\n    fabricId: string;\n    vendorId: number;\n  }): Promise<void> {\n    console.log(options);\n    throw new Error('Method not implemented.');\n  }\n  clear(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  commandOnOff(options: {\n    value: boolean;\n    deviceId: string;\n    endpointId: number;\n  }): Promise<void> {\n    console.log(options);\n    throw new Error('Method not implemented.');\n  }\n\n  getEndpoint<T>(options: {\n    deviceId: string;\n    endpointId: number;\n  }): Promise<{ data: T }> {\n    console.log(options);\n    throw new Error('Method not implemented.');\n  }\n  getCluster<T>(options: {\n    deviceId: string;\n    endpointId: number;\n    clusterId: number;\n  }): Promise<{ data: T }> {\n    console.log(options);\n    throw new Error('Method not implemented.');\n  }\n  getAttribute<T>(options: {\n    deviceId: string;\n    endpointId: number;\n    clusterId: number;\n    attributeId: number;\n  }): Promise<{ data: T }> {\n    console.log(options);\n    throw new Error('Method not implemented.');\n  }\n}\n"]}